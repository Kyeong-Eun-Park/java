/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-03-22 08:28:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class member_005fjoin_005fform_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1675146893323L));
    _jspx_dependants.put("jar:file:/D:/Shared/JSP/workspace_JSP/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/MVC_Board/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<!-- css/main.css 파일 불러오기 -->\r\n");
      out.write("<link href=\"css/inc.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("<link href=\"css/subpage.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("<script src=\"js/jquery-3.6.4.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(function() {\r\n");
      out.write("		// 각 규칙 통과 여부를 저장할 변수 선언\r\n");
      out.write("		// => 각 항목 체크 시 통과할 경우 true 로 변경, 통과하지 못할 경우 false 로 변경\r\n");
      out.write("		let nameStatus = false;\r\n");
      out.write("		let idStatus = false;\r\n");
      out.write("		let passwdStatus = false;\r\n");
      out.write("		let passwd2Status = false;\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		// 중복확인 버튼 클릭됐을 때의 이벤트 처리		\r\n");
      out.write("// 		$(\"#btnCheckId\").on(\"click\", function() {\r\n");
      out.write("// 			// 입력받은 아이디 가져와서 변수에 저장 후 출력\r\n");
      out.write("// 			let id = $(\"#id\").val();\r\n");
      out.write("			\r\n");
      out.write("// 			// 만약, 기존 방식대로 아이디 중복 확인을 수행할 경우\r\n");
      out.write("// 			// => location.href 속성을 사용하여 서블릿 주소 요청하고 아이디를 함께 전달 후\r\n");
      out.write("// 			//    중복 확인 결과값을 가지고 현재 페이지로 다시 이동(포워딩)\r\n");
      out.write("// 			location.href = \"MemberCheckId.me?id=\" + id;\r\n");
      out.write("// 		});\r\n");
      out.write("		// ----------------------------------------------------------\r\n");
      out.write("		// 아이디 입력 시 중복 체크 수행을 위한 AJAX 작업 처리\r\n");
      out.write("		// 아이디 입력란에서 포커스가 해제될 때(커서가 빠질 때)의 이벤트 처리\r\n");
      out.write("		$(\"#id\").on(\"blur\", function() {\r\n");
      out.write("			let id = $(\"#id\").val();\r\n");
      out.write("			\r\n");
      out.write("			// 입력된 아이디가 널스트링이면 \"checkIdResult\" 영역에\r\n");
      out.write("			// \"아이디는 필수 입력 항목입니다\"(빨간색) 출력 후 함수 처리 종료(return)\r\n");
      out.write("			if(id == \"\") {\r\n");
      out.write("				idStatus = false;\r\n");
      out.write("				$(\"#checkIdResult\").html(\"아이디는 필수 입력 항목입니다\").css(\"color\", \"red\");\r\n");
      out.write("				return; // 함수 처리 종료\r\n");
      out.write("			} else {\r\n");
      out.write("				// 아이디 정규표현식 확인(영문자, 숫자, 특수문자 조합 4 ~ 8글자)\r\n");
      out.write("				let regex = /^[A-Za-z0-9!@#$%]{4,8}$/;\r\n");
      out.write("				\r\n");
      out.write("				if(!regex.exec(id)) { // 규칙 불일치\r\n");
      out.write("					$(\"#checkIdResult\").html(\"영문자, 숫자, 특수문자 조합 4 ~ 8글자\").css(\"color\", \"red\");\r\n");
      out.write("					idStatus = false;\r\n");
      out.write("				} else { // 규칙 일치\r\n");
      out.write("					// AJAX 를 활용하여 \"MemberCheckDupId.me\" 서블릿 요청을 통해\r\n");
      out.write("					// 아이디 중복 검사 작업 수행 후 결과값을 리턴받아 처리\r\n");
      out.write("					// => 전달할 파라미터 : 아이디\r\n");
      out.write("					$.ajax({\r\n");
      out.write("						url: \"MemberCheckDupId.me\", // MemberCheckDupIdAction 매핑\r\n");
      out.write("						data: {\r\n");
      out.write("							id: $(\"#id\").val()\r\n");
      out.write("						},\r\n");
      out.write("						success: function(result) { // 성공 시에만 작업 처리\r\n");
      out.write("							// 처리 페이지(비즈니스 로직)에서 처리 성공 후 \"true\" or \"false\" 값 리턴\r\n");
      out.write("							// 리턴받은 결과값에 대해 \"true\" 또는 \"false\" 판별\r\n");
      out.write("							if(result == \"true\") {\r\n");
      out.write("								// checkIdResult 영역에 \"이미 사용중인 아이디\"(빨간색) 출력\r\n");
      out.write("								$(\"#checkIdResult\").html(\"이미 사용중인 아이디\").css(\"color\", \"red\");\r\n");
      out.write("								idStatus = false;\r\n");
      out.write("							} else if(result == \"false\") {\r\n");
      out.write("								// checkIdResult 영역에 \"사용 가능한 아이디\"(파란색) 출력\r\n");
      out.write("								$(\"#checkIdResult\").html(\"사용 가능한 아이디\").css(\"color\", \"blue\");\r\n");
      out.write("								idStatus = true;\r\n");
      out.write("							}\r\n");
      out.write("						}\r\n");
      out.write("					}); // ajax 끝\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// 이름 입력 항목에 한글 외의 다른 데이터 입력 시(change)\r\n");
      out.write("		// \"한글만 입력 가능합니다\" 출력 후 이름 입력란 포커스\r\n");
      out.write("		// => 주의! blur 이벤트 처리 시 alert() 함수로 인해 다시 blur 이벤트 동작함\r\n");
      out.write("		$(\"#name\").on(\"change\", function() {\r\n");
      out.write("			let name = $(\"#name\").val(); // 입력값 가져오기\r\n");
      out.write("			\r\n");
      out.write("			// 이름 검증에 사용할 정규표현식 작성(한글 2 ~ 5글자)\r\n");
      out.write("			let regex = /^[가-힣]{2,10}$/;\r\n");
      out.write("			\r\n");
      out.write("			// if문 내에서 정규표현식 객체의 exec() 메서드를 사용하여 입력값 검증 수행\r\n");
      out.write("			if(!regex.exec(name)) {\r\n");
      out.write("				// \"한글 2 ~ 5글자 필수\" 출력 후 입력창 포커스 요청\r\n");
      out.write("				$(\"#checkNameResult\").html(\"한글 2 ~ 5자 필수\").css(\"color\", \"red\");\r\n");
      out.write("				$(\"#name\").select(); // 입력창 포커스 요청 및 입력항목 블럭지정\r\n");
      out.write("				nameStatus = false;\r\n");
      out.write("			} else {\r\n");
      out.write("				// \"사용 가능\" 출력\r\n");
      out.write("				$(\"#checkNameResult\").html(\"사용 가능\").css(\"color\", \"blue\");\r\n");
      out.write("				nameStatus = true;\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// 비밀번호 입력 시(change 이벤트) 정규표현식 판별\r\n");
      out.write("		// => 판별 결과를 id 선택자 checkPasswdResult 영역에 출력\r\n");
      out.write("		//    (\"사용 가능한 패스워드\" or \"패스워드 규칙 어긋남\")\r\n");
      out.write("		// => 규칙1. 전체 길이 규칙 검사(영문자, 숫자, 특수문자(!@#$%) 조합 8 ~ 16자)\r\n");
      out.write("		$(\"#passwd\").on(\"change\", function() {\r\n");
      out.write("			let passwd = $(\"#passwd\").val(); // 입력값 가져오기\r\n");
      out.write("			\r\n");
      out.write("			// 이름 검증에 사용할 정규표현식 작성\r\n");
      out.write("			// 1) 전체 길이 및 사용 문자 종류에 대한 판별(영문자, 숫자, 특수문자 8 ~ 16)\r\n");
      out.write("			let lengthRegex = /^[A-Za-z0-9!@#$%]{8,16}$/;\r\n");
      out.write("			// 2) 부분 검사 규칙(단, 시작(^) 과 끝($) 을 기술하면 안된다!)\r\n");
      out.write("			let engUpperRegex = /[A-Z]/; // 영문 대문자\r\n");
      out.write("			let engLowerRegex = /[a-z]/; // 영문 소문자\r\n");
      out.write("			let numberRegex = /[0-9]/; // 숫자\r\n");
      out.write("			let specRegex = /[!@#$%]/; // 특수문자\r\n");
      out.write("			\r\n");
      out.write("			// 전체 길이 및 사용 문자 종류 검증\r\n");
      out.write("			if(!lengthRegex.exec(passwd)) {\r\n");
      out.write("				$(\"#checkPasswdResult\").html(\"영문자, 숫자, 특수문자 8 ~ 16자 필수\").css(\"color\", \"red\");\r\n");
      out.write("				$(\"#passwd\").select(); // 입력창 포커스 요청 및 입력항목 블럭지정\r\n");
      out.write("				passwdStatus = false;\r\n");
      out.write("			} else {\r\n");
      out.write("				// 패스워드 복잡도(부분 검사) 체크를 위해 항목 갯수 카운팅 할 변수 선언\r\n");
      out.write("				let count = 0;\r\n");
      out.write("				\r\n");
      out.write("				// 항목별 검사 후 항목이 일치하는 문자가 있으면 카운트 증가(각각 별도로 비교)\r\n");
      out.write("				if(engUpperRegex.exec(passwd)) { count++ }\r\n");
      out.write("				if(engLowerRegex.exec(passwd)) { count++ }\r\n");
      out.write("				if(numberRegex.exec(passwd)) { count++ }\r\n");
      out.write("				if(specRegex.exec(passwd)) { count++ }\r\n");
      out.write("				\r\n");
      out.write("				// 카운팅 된 결과값 판별\r\n");
      out.write("				// => 4점 : 안전, 3점 : 보통, 2점 : 위험, 1점 이하 : 사용 불가능한 패스워드\r\n");
      out.write("				switch(count) {\r\n");
      out.write("					case 4 :  \r\n");
      out.write("						$(\"#checkPasswdResult\").html(\"안전\").css(\"color\", \"green\"); \r\n");
      out.write("						passwdStatus = true;\r\n");
      out.write("						break;\r\n");
      out.write("					case 3 :  \r\n");
      out.write("						$(\"#checkPasswdResult\").html(\"보통\").css(\"color\", \"yellow\"); \r\n");
      out.write("						passwdStatus = true;\r\n");
      out.write("						break;\r\n");
      out.write("					case 2 :  \r\n");
      out.write("						$(\"#checkPasswdResult\").html(\"위험\").css(\"color\", \"orange\"); \r\n");
      out.write("						passwdStatus = true;\r\n");
      out.write("						break;\r\n");
      out.write("					case 1 :\r\n");
      out.write("					case 0 :\r\n");
      out.write("						$(\"#checkPasswdResult\").html(\"사용 불가능한 패스워드\").css(\"color\", \"red\"); break;\r\n");
      out.write("						passwdStatus = false;\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// 비밀번호확인(passwd2) 항목이 변경되면 비밀번호(passwd)와 비교하여\r\n");
      out.write("		// 일치할 경우 \"비밀번호 일치\"(파란색), 아니면 \"비밀번호 불일치\"(빨간색) 출력\r\n");
      out.write("		$(\"#passwd2\").on(\"change\", function() {\r\n");
      out.write("			if($(\"#passwd\").val() == $(\"#passwd2\").val()) {\r\n");
      out.write("				$(\"#checkPasswd2Result\").html(\"비밀번호 일치\").css(\"color\", \"blue\");\r\n");
      out.write("				passwd2Status = true;\r\n");
      out.write("			} else {\r\n");
      out.write("				$(\"#checkPasswd2Result\").html(\"비밀번호 불일치\").css(\"color\", \"red\");\r\n");
      out.write("				passwd2Status = false;\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// 폼 태그에 대한 submit 이벤트 처리\r\n");
      out.write("		$(\"form\").submit(function() {\r\n");
      out.write("			// 이름, 아이디, 패스워드, 패스워드확인란에 대한 모든 규칙이 통화했을 경우에만\r\n");
      out.write("			// submit 기능이 동작하도록 true 리턴하고, 아니면 false 리턴\r\n");
      out.write("			// => 단, 사전에 각 규칙을 통과했는지 여부를 변수에 저장하는 작업 필요\r\n");
      out.write("			if(!nameStatus) {\r\n");
      out.write("				alert(\"이름을 확인하세요!\");\r\n");
      out.write("				$(\"#name\").focus();\r\n");
      out.write("				return false;\r\n");
      out.write("			} else if(!idStatus) {\r\n");
      out.write("				alert(\"아이디를 확인하세요!\");\r\n");
      out.write("				$(\"#id\").focus();\r\n");
      out.write("				return false;\r\n");
      out.write("			} else if(!passwdStatus) {\r\n");
      out.write("				alert(\"비밀번호를 확인하세요!\");\r\n");
      out.write("				$(\"#passwd\").focus();\r\n");
      out.write("				return false;\r\n");
      out.write("			} else if(!passwd2Status) {\r\n");
      out.write("				alert(\"비밀번호확인을 확인하세요!\");\r\n");
      out.write("				$(\"#passwd2\").focus();\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			// 모든 규칙 통과 시 submit 동작 수행\r\n");
      out.write("			return true;\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("	<header>\r\n");
      out.write("		");
      out.write("\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/inc/top.jsp", out, false);
      out.write("\r\n");
      out.write("	</header>\r\n");
      out.write("	<article id=\"joinForm\">\r\n");
      out.write("		<h1>회원 가입</h1>\r\n");
      out.write("		<form action=\"MemberJoinPro.me\" method=\"post\" name=\"joinForm\">\r\n");
      out.write("			<table border=\"1\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th class=\"td_left\">이름</th>\r\n");
      out.write("					<td class=\"td_right\">\r\n");
      out.write("						<input type=\"text\" name=\"name\" id=\"name\" required=\"required\">\r\n");
      out.write("						<span id=\"checkNameResult\"></span>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th class=\"td_left\">ID</th>\r\n");
      out.write("					<td class=\"td_right\">\r\n");
      out.write("						<input type=\"text\" name=\"id\" id=\"id\" placeholder=\"4 ~ 8글자 사이 입력\" required=\"required\">\r\n");
      out.write("<!-- 						<input type=\"button\" value=\"중복확인\" id=\"btnCheckId\"> -->\r\n");
      out.write("						<span id=\"checkIdResult\"></span>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th class=\"td_left\">비밀번호</th>\r\n");
      out.write("					<td class=\"td_right\">\r\n");
      out.write("						<input type=\"text\" name=\"passwd\" id=\"passwd\" placeholder=\"8 ~ 16글자 사이 입력\" required=\"required\">\r\n");
      out.write("						<span id=\"checkPasswdResult\"></span>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th class=\"td_left\">비밀번호확인</th>\r\n");
      out.write("					<td class=\"td_right\">\r\n");
      out.write("						<input type=\"password\" name=\"passwd2\" id=\"passwd2\" onchange=\"checkConfirmPasswd(this.value)\" required=\"required\">\r\n");
      out.write("						<span id=\"checkPasswd2Result\"></span>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th class=\"td_left\">E-Mail</th>\r\n");
      out.write("					<td class=\"td_right\">\r\n");
      out.write("						<input type=\"text\" name=\"email1\" class=\"email\" required=\"required\">@<input type=\"text\" name=\"email2\" class=\"email\" required=\"required\">\r\n");
      out.write("						<select id=\"emailDomain\" onchange=\"selectDomain(this.value)\">\r\n");
      out.write("							<option value=\"\">직접입력</option>\r\n");
      out.write("							<option value=\"naver.com\">naver.com</option>\r\n");
      out.write("							<option value=\"nate.com\">nate.com</option>\r\n");
      out.write("							<option value=\"gmail.com\">gmail.com</option>\r\n");
      out.write("						</select>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th class=\"td_left\">성별</th>\r\n");
      out.write("					<td class=\"td_right\">\r\n");
      out.write("						<!-- 라디오버튼 그룹에 모두 required 속성 설정 시 하나 필수 선택 요구 -->\r\n");
      out.write("						<input type=\"radio\" name=\"gender\" value=\"남\" required=\"required\">남\r\n");
      out.write("						<input type=\"radio\" name=\"gender\" value=\"여\" required=\"required\">여\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td colspan=\"2\" id=\"btnArea\">\r\n");
      out.write("						<input type=\"submit\" value=\"가입\">\r\n");
      out.write("						<input type=\"reset\" value=\"초기화\">\r\n");
      out.write("						<input type=\"button\" value=\"돌아가기\">\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("		</form>\r\n");
      out.write("	</article>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /member/member_join_form.jsp(200,1) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty sessionScope.sId }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("		<script type=\"text/javascript\">\r\n");
          out.write("			alert(\"잘못된 접근입니다!\");\r\n");
          out.write("			location.href = \"./\";\r\n");
          out.write("		</script>\r\n");
          out.write("	");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }
}
