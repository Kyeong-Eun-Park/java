/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-03-15 07:57:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jquery;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test9_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"../js/jquery-3.6.4.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(function() {\r\n");
      out.write("		// each() 메서드 : 대상 요소에 대한 반복을 수행하는 함수\r\n");
      out.write("		// => 지정 가능한 대상 : 태그, 배열 등의 객체\r\n");
      out.write("		// => 기본 문법 : $(\"선택자\").each(function(index, item) {});\r\n");
      out.write("		//                (index 파라미터 : 대상 요소의 인덱스, item 파라미터 : 대상 요소 객체)\r\n");
      out.write("		\r\n");
      out.write("		// \"h3\" 태그를 차례대로 접근하는 반복문 작성\r\n");
      out.write("		$(\"h3\").each(function(index, item) {\r\n");
      out.write("// 			alert(index + \" : \" + item);\r\n");
      out.write("			// 0 : [object HTMLHeadingElement], 1 : [object HTMLHeadingElement], 2 : [object HTMLHeadingElement]\r\n");
      out.write("			// => h3 태그가 세 개이므로, 각 요소를 차례대로 접근하여 세 번 반복됨\r\n");
      out.write("			// => index 파라미터에 요소의 순서번호(인덱스)가 전달되고\r\n");
      out.write("			//    item 파라미터에 해당 요소의 객체가 전달됨\r\n");
      out.write("			// => 단, 전달되는 객체는 jQuery 객체가 아닌 HTML 요소에 대한 객체로 전달됨\r\n");
      out.write("			//    따라서, 해당 객체를 통해 html() 등의 메서드를 직접 호출이 불가능하며,\r\n");
      out.write("			//    대상을 선택자 형식으로 지정하여 jQuery 메서드 호출해야한다!\r\n");
      out.write("// 			alert(index + \" : \" + item.html()); // 오류 발생!\r\n");
      out.write("			\r\n");
      out.write("			// 전달받은 HTML 객체를 jQuery 문장 내에 기술하여 jQuery 객체로 사용 가능\r\n");
      out.write("// 			alert(index + \" : \" + $(item).html());\r\n");
      out.write("			// 0 : element-1, 1 : element-2, 2 : element-3\r\n");
      out.write("			\r\n");
      out.write("			// 전달받은 객체를 가리키는 this 키워드 사용해도 현재 반복중인 대상 객체 접근 가능함\r\n");
      out.write("// 			alert(index + \" : \" + $(this).html());\r\n");
      out.write("			\r\n");
      out.write("			// table1 테이블 태그 내의 가장 마지막 요소로 index 값을 각 행에 데이터로 추가\r\n");
      out.write("			// => <tr><td></td></tr> 사이에 index 값을 데이터로 표시\r\n");
      out.write("// 			$(\"#table1\").append(\"<tr><td>\" + index + \"</td></tr>\");\r\n");
      out.write("			// => 첫번째 테이블의 번호 항목에 인덱스 번호가 차례대로 표시됨\r\n");
      out.write("			//    (h3 태그가 3개이므로 3번 반복하면서 0 ~ 2 까지의 값을 각 셀에 출력)\r\n");
      out.write("			\r\n");
      out.write("// 			$(\"table\").append(\"<tr><td>\" + index + \"</td></tr>\");\r\n");
      out.write("			// => 주의! 테이블이 복수개 존재할 경우 복수개의 테이블에 모두 적용됨\r\n");
      out.write("			\r\n");
      out.write("			// 두번째 테이블 내의 가장 마지막 요소로 \r\n");
      out.write("			// 인덱스 번호와 h3 태그 내의 텍스트 데이터를 차례대로 추가\r\n");
      out.write("// 			$(\"table\").eq(1).append(\"<tr><td>\" + index + \"</td><td>\" + $(item).text() + \"</td></tr>\");\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// 배열을 활용하여 반복할 경우\r\n");
      out.write("		let arr = [\r\n");
      out.write("			{no : \"1번\", name : \"홍길동\"},\r\n");
      out.write("			{no : \"2번\", name : \"이순신\"},\r\n");
      out.write("			{no : \"3번\", name : \"강감찬\"}\r\n");
      out.write("		];\r\n");
      out.write("		\r\n");
      out.write("		// 배열처럼 지정할 선택자가 없을 경우 $.each() 형태로 메서드를 호출한 후\r\n");
      out.write("		// 파라미터로 반복할 객체(배열 등), 익명함수를 전달\r\n");
      out.write("		$.each(arr, function(index, item) {\r\n");
      out.write("// 			alert(item); // [object Object][object Object][object Object]\r\n");
      out.write("			// 배열 내의 요소가 각각의 객체이므로 객체명을 통해 객체 내의 값 접근 가능\r\n");
      out.write("			// => 이 때, 중괄호{} 로 묶인 객체만큼 자동으로 반복됨\r\n");
      out.write("			//    (배열 인덱스가 index 파라미터에, 배열 내의 각 객체가 item 파라미터에 전달됨)\r\n");
      out.write("			$(\"table\").eq(1).append(\"<tr><td>\" + item.no + \"</td><td>\" + item.name + \"</td></tr>\");\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>jQuery - test9.jsp</h1>\r\n");
      out.write("	<h3>element-1</h3>\r\n");
      out.write("	<h3>element-2</h3>\r\n");
      out.write("	<h3>element-3</h3>\r\n");
      out.write("	<div></div>\r\n");
      out.write("	<table border=\"1\" id=\"table1\">\r\n");
      out.write("		<tr><th>번호</th></tr>\r\n");
      out.write("	</table>\r\n");
      out.write("	<table border=\"1\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>번호</th>\r\n");
      out.write("			<th>항목</th>\r\n");
      out.write("		</tr>\r\n");
      out.write("	</table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
