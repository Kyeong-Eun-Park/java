/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-04-26 02:03:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ajax;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test4_005fjson_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"../js/jquery-3.6.4.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(function() {\r\n");
      out.write("		$(\"#btnOk\").on(\"click\", function() {\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type: \"GET\",\r\n");
      out.write("				url: \"test4_json_data.json\",\r\n");
      out.write("				dataType: \"json\" // 응답 데이터가 JSON 객체 형태로 전달되도록 \"json\" 타입 지정\r\n");
      out.write("			})\r\n");
      out.write("			.done(function(data) {\r\n");
      out.write("				$(\"#resultArea\").html(\r\n");
      out.write("					\"<table border='1'><tr><th>JSON 데이터 파싱 결과</th></tr>\"\r\n");
      out.write("					+ \"<tr><th>이름</th></table>\"\r\n");
      out.write("				);\r\n");
      out.write("				\r\n");
      out.write("				// 응답된 JSON 데이터가 배열 형태일 경우(데이터 직접 출력도 가능)\r\n");
      out.write("				// => 일반 자바스크립트 배열 접근 형식과 동일(반복문 사용)\r\n");
      out.write("				// 배열 data 의 길이만큼 for문을 통해 반복 수행\r\n");
      out.write("// 				for(let i = 0; i < data.length; i++) {\r\n");
      out.write("// 					// 배열명[i] 형식으로 배열의 각 요소에 접근\r\n");
      out.write("// 					$(\"#resultArea > table\").append(\r\n");
      out.write("// 						\"<tr>\"\r\n");
      out.write("// 						+ \"<td>\" + data[i] + \"</td>\"\r\n");
      out.write("// 						+ \"</tr>\"\r\n");
      out.write("// 					);\r\n");
      out.write("// 				}\r\n");
      out.write("				\r\n");
      out.write("				// for...of 문으로 동일한 작업 수행\r\n");
      out.write("				for(let name of data) {\r\n");
      out.write("					$(\"#resultArea > table\").append(\r\n");
      out.write("						\"<tr>\"\r\n");
      out.write("						+ \"<td>\" + name + \"</td>\"\r\n");
      out.write("						+ \"</tr>\"\r\n");
      out.write("					);\r\n");
      out.write("				}\r\n");
      out.write("			})\r\n");
      out.write("			.fail(function() {\r\n");
      out.write("				alert(\"요청 실패!\");\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type: \"GET\",\r\n");
      out.write("				url: \"test4_json_data2.json\",\r\n");
      out.write("				dataType: \"json\" // 응답 데이터가 JSON 객체 형태로 전달되도록 \"json\" 타입 지정\r\n");
      out.write("			})\r\n");
      out.write("			.done(function(data) {\r\n");
      out.write("				$(\"#resultArea2\").html(\r\n");
      out.write("					\"<table border='1'><tr><th colspan='3'>JSON 데이터 파싱 결과</th></tr>\"\r\n");
      out.write("					+ \"<tr><th>아이디</th><th>이름</th><th>나이</th></tr></table>\"\r\n");
      out.write("				);\r\n");
      out.write("				\r\n");
      out.write("				// 배열 내에 객체 형태로 JSON 데이터가 존재할 경우\r\n");
      out.write("				// => 배열 반복하면서 각 배열 요소(객체) 내의 속성에 접근\r\n");
      out.write("				for(let member of data) {\r\n");
      out.write("					$(\"#resultArea2 > table\").append(\r\n");
      out.write("						\"<tr>\"\r\n");
      out.write("						+ \"<td>\" + member.id + \"</td>\"\r\n");
      out.write("						+ \"<td>\" + member.name + \"</td>\"\r\n");
      out.write("						+ \"<td>\" + member.age + \"</td>\"\r\n");
      out.write("						+ \"</tr>\"\r\n");
      out.write("					);\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("			})\r\n");
      out.write("			.fail(function() {\r\n");
      out.write("				alert(\"요청 실패!\");\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			// ------------------------------------------------------------\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type: \"GET\",\r\n");
      out.write("				url: \"test4_json_data3.json\",\r\n");
      out.write("				dataType: \"json\" // 응답 데이터가 JSON 객체 형태로 전달되도록 \"json\" 타입 지정\r\n");
      out.write("			})\r\n");
      out.write("			.done(function(data) {\r\n");
      out.write("				$(\"#resultArea3\").html(\r\n");
      out.write("					\"<table border='1'><tr><th colspan='4'>JSON 데이터 파싱 결과</th></tr>\"\r\n");
      out.write("					+ \"<tr><th>아이디</th><th>이름</th><th>나이</th><th>주소</th></tr></table>\"\r\n");
      out.write("				);\r\n");
      out.write("				\r\n");
      out.write("				// 배열 내에 객체 형태로 JSON 데이터가 존재할 경우(객체 내에 또다른 객체 존재)\r\n");
      out.write("				// => 배열 반복하면서 각 배열 요소(객체) 내의 속성에 접근하여\r\n");
      out.write("				//    해당 객체 내의 다른 객체에 다시 접근\r\n");
      out.write("				for(let member of data) {\r\n");
      out.write("					$(\"#resultArea3 > table\").append(\r\n");
      out.write("						\"<tr>\"\r\n");
      out.write("						+ \"<td>\" + member.id + \"</td>\"\r\n");
      out.write("						+ \"<td>\" + member.name + \"</td>\"\r\n");
      out.write("						+ \"<td>\" + member.age + \"</td>\"\r\n");
      out.write("						+ \"<td>\" + member.address.address1 + \" \" + member.address.address2 + \"</td>\"\r\n");
      out.write("						+ \"</tr>\"\r\n");
      out.write("					);\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("			})\r\n");
      out.write("			.fail(function() {\r\n");
      out.write("				alert(\"요청 실패!\");\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// ------------------------------------------------------------\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>test4_json.jsp - AJAX</h1>\r\n");
      out.write("	<input type=\"button\" value=\"JSON 데이터 파싱\" id=\"btnOk\">\r\n");
      out.write("	<hr>\r\n");
      out.write("	<div id=\"resultArea\"></div>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<div id=\"resultArea2\"></div>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<div id=\"resultArea3\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
