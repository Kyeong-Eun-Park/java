/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-03-15 07:25:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jquery;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test8_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"../js/jquery-3.6.4.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	/*\r\n");
      out.write("	[ 이벤트 처리 ]\r\n");
      out.write("	DOM 객체를 탐색 및 접근하여 대상에 대한 이벤트를 처리하는 방법\r\n");
      out.write("	- HTML 태그의 자바스크립트 이벤트와 동일(on'click', on'submit' 등)\r\n");
      out.write("	- 각각의 이벤트를 의미하는 메서드를 호출하거나\r\n");
      out.write("	  통합된 방식으로 on() 메서드를 통해 이벤트 지정 가능\r\n");
      out.write("	  ex) 클릭 이벤트 : click() 함수 또는 on(\"click\") 함수 사용\r\n");
      out.write("	\r\n");
      out.write("	1. on(\"click\") 메서드 이벤트\r\n");
      out.write("	- 특정 대상을 \"클릭\"했을 때 동작하는 이벤트 처리(click() 함수와 동일)\r\n");
      out.write("	- 클릭 대상에 대한 제한 없음(버튼이 아닌 요소도 적용 가능)\r\n");
      out.write("	\r\n");
      out.write("	2. on(\"focus\") 메서드 또는 on(\"blur\") 메서드 이벤트\r\n");
      out.write("	- 특정 대상에 포커스가 주어지거나 포커스 해제 시 동작하는 이벤트 처리\r\n");
      out.write("	- focus(), blur() 메서드로 대체 가능\r\n");
      out.write("	- 클릭이 아닌 키보드 등을 통한 포커스 이동도 동일하게 취급됨\r\n");
      out.write("	*/\r\n");
      out.write("	\r\n");
      out.write("	$(function() {\r\n");
      out.write("		// 버튼 클릭 시 이벤트 처리\r\n");
      out.write("// 		$(\"input[type=button]\").on(\"click\", function() {\r\n");
      out.write("// 			// 버튼들 중 아무 버튼이나 클릭 시 익명 함수 실행됨 \r\n");
      out.write("// 			alert(\"버튼 클릭!\");\r\n");
      out.write("// 		});\r\n");
      out.write("		// 버튼 지정 시 \"input[type=button]\" 선택자 대신 가상선택자 \":button\" 사용 가능\r\n");
      out.write("// 		$(\":button\").on(\"click\", function() {\r\n");
      out.write("// 			// 버튼들 중 아무 버튼이나 클릭 시 익명 함수 실행됨 \r\n");
      out.write("// // 			alert(\"버튼 클릭!\");\r\n");
      out.write("			\r\n");
      out.write("// 			// 버튼들 중에서 클릭된 대상에 포커스가 발생하므로 가상선택자(\":focus\") 사용하여\r\n");
      out.write("// 			// 클릭된 버튼을 판별 가능하며, 대상의 val() 메서드를 통해 버튼 텍스트 리턴 가능\r\n");
      out.write("// // 			alert($(\":button:focus\").val() + \" 버튼 클릭!\");\r\n");
      out.write("			\r\n");
      out.write("// 			if($(\":button:focus\").val() == \"전송\") { // 전송 버튼 클릭\r\n");
      out.write("// 				alert(\"전송 버튼 클릭됨!\");\r\n");
      out.write("// 			} else if($(\":button:focus\").val() == \"취소\") { // 취소 버튼 클릭\r\n");
      out.write("// 				alert(\"취소 버튼 클릭됨!\");\r\n");
      out.write("// 			}\r\n");
      out.write("// 		});\r\n");
      out.write("		\r\n");
      out.write("		// eq() 메서드를 통해 첫번째 버튼(전송 버튼) 클릭 시 이벤트 처리\r\n");
      out.write("		$(\":button\").eq(0).on(\"click\", function() {\r\n");
      out.write("// 			alert(\"전송 버튼 클릭됨!\");\r\n");
      out.write("\r\n");
      out.write("			// 입력받은 아이디, 패스워드, 선택된 과목명을 textarea 에 출력\r\n");
      out.write("			// => 입력 항목 요소의 value 속성에 접근하기 위해 val() 메서드 활용\r\n");
      out.write("			$(\"#resultArea\").val(\r\n");
      out.write("				\"아이디 : \" + $(\"input[name=id]\").val() + \"\\n\"\r\n");
      out.write("				+ \"패스워드 : \" + $(\"input[name=passwd]\").val() + \"\\n\"\r\n");
      out.write("				+ \"선택과목 : \" + $(\"#selectBox\").val() + \"\\n\"\r\n");
      out.write("			);\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// textarea 를 \"클릭\" 했을 때의 이벤트 처리\r\n");
      out.write("// 		$(\"textarea\").on(\"click\", function() {\r\n");
      out.write("// 			alert(\"textarea 클릭!\");\r\n");
      out.write("// 		});\r\n");
      out.write("		\r\n");
      out.write("		// div 영역(\"clickDiv\") 클릭 시 이벤트 처리\r\n");
      out.write("		$(\"#clickDiv\").on(\"click\", function() {\r\n");
      out.write("			alert(\"div 영역 클릭!\");\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// textarea 에 포커스가 주어지면 이벤트 처리\r\n");
      out.write("		$(\"#resultArea\").on(\"focus\", function() {\r\n");
      out.write("			$(\"#resultArea\").val(\"textarea focus in\");\r\n");
      out.write("			\r\n");
      out.write("			// CSS 속성 중 배경색(background)을 \"skyblue\" 로 변경\r\n");
      out.write("			$(\"#resultArea\").css(\"background\", \"skyblue\");\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// textarea 에서 포커스가 해제되면 이벤트 처리\r\n");
      out.write("		$(\"#resultArea\").on(\"blur\", function() {\r\n");
      out.write("			$(\"#resultArea\").val(\"textarea focus out\");\r\n");
      out.write("			\r\n");
      out.write("			// CSS 속성 중 배경색(background)을 \"white\" 로 변경\r\n");
      out.write("			$(\"#resultArea\").css(\"background\", \"white\");\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// 아이디 및 패스워드 입력창에 포커스 요청 시 \"skyblue\", 해제 시 \"white\" 로 배경색 변경\r\n");
      out.write("		$(\"input\").on(\"focus\", function() {\r\n");
      out.write("// 			$(\"input[name=id]\").css(\"background\", \"skyblue\");\r\n");
      out.write("			// jQuery 객체 형태로 키워드 this 사용 시 현재 요소의 객체가 선택됨\r\n");
      out.write("			$(this).css(\"background\", \"skyblue\");\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		$(\"input\").on(\"blur\", function() {\r\n");
      out.write("// 			$(\"input[name=id]\").css(\"background\", \"white\");\r\n");
      out.write("			$(this).css(\"background\", \"white\");\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>jQuery - test8.jsp</h1>\r\n");
      out.write("	<div>\r\n");
      out.write("		<div id=\"inputBox\">\r\n");
      out.write("			아이디 : <input type=\"text\" name=\"id\" required=\"required\"><br>\r\n");
      out.write("			패스워드 : <input type=\"password\" name=\"passwd\" required=\"required\">\r\n");
      out.write("		</div>\r\n");
      out.write("		<select id=\"selectBox\" name=\"subject\">\r\n");
      out.write("			<option value=\"\">과목을 선택하세요</option>\r\n");
      out.write("			<option value=\"자바\">자바</option>\r\n");
      out.write("			<option value=\"JSP\">JSP</option>\r\n");
      out.write("			<option value=\"스프링프레임워크\">스프링프레임워크</option>\r\n");
      out.write("		</select>\r\n");
      out.write("		<br>\r\n");
      out.write("		<textarea rows=\"5\" cols=\"20\" id=\"resultArea\"></textarea>\r\n");
      out.write("		<br>\r\n");
      out.write("		<input type=\"button\" value=\"전송\"><input type=\"button\" value=\"취소\">\r\n");
      out.write("	</div>\r\n");
      out.write("	-------------------\r\n");
      out.write("	<div id=\"clickDiv\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>\r\n");
      out.write("	-------------------\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
