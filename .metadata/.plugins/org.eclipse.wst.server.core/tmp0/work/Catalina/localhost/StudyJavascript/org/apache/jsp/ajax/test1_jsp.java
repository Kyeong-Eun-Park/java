/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-03-21 07:13:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ajax;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"js/jquery-3.6.4.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	/*\r\n");
      out.write("	AJAX(Asynchonous Javascript And Xml, 비동기식 자바스크립트&XML)\r\n");
      out.write("	- 웹 페이지(브라우저)의 갱신(Refresh) 없이도 요청을 수행하고 \r\n");
      out.write("	  요청에 대한 응답을 처리할 수 있는 자바스크립트(jQuery) 라이브러리\r\n");
      out.write("	- 데이터베이스 등의 작업 요청 시 요청된 응답이 돌아올 때까지 기다리지 않고\r\n");
      out.write("	  다른 작업을 수행하면서 요청에 대한 응답이 돌아오면 해당 응답을 처리하는 기술\r\n");
      out.write("	- 주로, 아이디 및 패스워드 검증 등의 실시간 정보 조회 작업에 활용\r\n");
      out.write("	\r\n");
      out.write("	< 기본 문법 >\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		type : xxx, // AJAX 로 요청 시 사용할 메서드(= 요청 방식 = \"GET\" or \"POST\" 등) 지정\r\n");
      out.write("		url : xxx, // AJAX 로 요청할 요청 주소(URL)\r\n");
      out.write("		data : xxx, // 요청(전송할) 데이터 지정(복수개 파라미터일 경우 중괄호로 묶음)\r\n");
      out.write("		dataType : xxx, // 응답 데이터에 대한 타입 지정\r\n");
      out.write("		success : function(response) { // 요청에 대한 처리 성공 시 처리할 함수 정의\r\n");
      out.write("			\r\n");
      out.write("		}, \r\n");
      out.write("		error : function(xhr, textStatus, errorThrown) { // 요청에 대한 처리 실패 시 처리할 함수 정의\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("	*/\r\n");
      out.write("	\r\n");
      out.write("	// 로그인 버튼이 클릭되었을 때 AJAX 를 사용하여 test1_result.jsp 페이지로 요청 전송하기\r\n");
      out.write("	$(function() {\r\n");
      out.write("		$(\"#btnLogin\").on(\"click\", function() {\r\n");
      out.write("			\r\n");
      out.write("// 			$.ajax({\r\n");
      out.write("// 				type: \"post\", // 요청 방식을 POST 방식으로 지정\r\n");
      out.write("// 				url: \"test1_result.jsp\", // AJAX 로 요청할 요청 주소(URL)\r\n");
      out.write("// 				data: { // 전송할 데이터가 복수개일 경우 중괄호로 묶기\r\n");
      out.write("// 					// 폼에서 입력한 데이터를 가져와서 파라미터로 표현(전송)하는 경우\r\n");
      out.write("// 					// 파라미터명 : 데이터 형식으로 지정\r\n");
      out.write("// 					id: $(\"#id\").val(), // id 선택자의 value 속성값을 id 파라미터로 저장\r\n");
      out.write("// 					passwd: $(\"#passwd\").val() // passwd 선택자의 value 속성값을 passwd 파라미터로 저장\r\n");
      out.write("// 					// -------- 값을 직접 지정 시 --------\r\n");
      out.write("// // 					id: \"admin\", // id 선택자의 value 속성값을 id 파라미터로 저장\r\n");
      out.write("// // 					passwd: \"1234\" // passwd 선택자의 value 속성값을 passwd 파라미터로 저장\r\n");
      out.write("// 				},\r\n");
      out.write("// 				dataType: \"text\",\r\n");
      out.write("// 				success: function(response) { // 요청 처리 성공 시 자동으로 호출되는 콜백함수\r\n");
      out.write("// 					// 익명 함수 파라미터로 응답 데이터가 전달됨(처리하는 페이지에서 응답한 결과)\r\n");
      out.write("// 					// id 선택자 \"resultArea\" 영역에 응답 데이터(response) 출력하기\r\n");
      out.write("// 					$(\"#resultArea\").html(response);\r\n");
      out.write("// 				},\r\n");
      out.write("// 				error: function(xhr, textStatus, errorThrown) {\r\n");
      out.write("// 					// 요청 처리 실패 시(= 에러 발생 시) 자동으로 호출되는 콜백함수\r\n");
      out.write("// 					$(\"#resultArea\").html(\r\n");
      out.write("// 							\"xhr = \" + xhr + \r\n");
      out.write("// 							\"<br>textStatus = \" + textStatus +\r\n");
      out.write("// 							\"<br>errorThrown = \" + errorThrown);\r\n");
      out.write("// 				}\r\n");
      out.write("// 			});\r\n");
      out.write("			\r\n");
      out.write("			// --------------------------------------------------------------------\r\n");
      out.write("			// form 태그 내부 파라미터를 모두 요청 페이지로 전송해야할 때\r\n");
      out.write("			// 자바스크립트를 통해 요소 각각에 접근하여 데이터를 가져올 수도 있지만\r\n");
      out.write("			// 폼(form 객체)를 대상으로 serialize() 메서드를 호출하면\r\n");
      out.write("			// 해당 폼의 데이터를 직렬화를 통해 내보내기 가능\r\n");
      out.write("			let sendData = $(\"form\").serialize(); // 태그 선택자 \"form\" 활용하여 데이터 직렬화\r\n");
      out.write("// 			alert(sendData); // id=admin&passwd=1234\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type: \"post\",\r\n");
      out.write("// 				url: \"test1_result.jsp\",\r\n");
      out.write("				// 실제 로그인 작업을 수행하는 MemberLoginPro.me 서블릿 주소 요청\r\n");
      out.write("				url: \"MemberLoginPro.me\",\r\n");
      out.write("				// serialize() 메서드를 통해 가져온 폼데이터를 전송할 데이터로 지정(중괄호 불필요)\r\n");
      out.write("				data: sendData, // sendData 변수 대신 직접 $(\"form\").serialize() 지정도 가능\r\n");
      out.write("				dataType: \"text\",\r\n");
      out.write("				success: function(response) { // 요청 처리 성공 시 자동으로 호출되는 콜백함수\r\n");
      out.write("					// 익명 함수 파라미터로 응답 데이터가 전달됨(처리하는 페이지에서 응답한 결과)\r\n");
      out.write("					// id 선택자 \"resultArea\" 영역에 응답 데이터(response) 출력하기\r\n");
      out.write("					$(\"#resultArea\").html(response);\r\n");
      out.write("				},\r\n");
      out.write("				error: function(xhr, textStatus, errorThrown) {\r\n");
      out.write("					// 요청 처리 실패 시(= 에러 발생 시) 자동으로 호출되는 콜백함수\r\n");
      out.write("					$(\"#resultArea\").html(\r\n");
      out.write("							\"xhr = \" + xhr + \r\n");
      out.write("							\"<br>textStatus = \" + textStatus +\r\n");
      out.write("							\"<br>errorThrown = \" + errorThrown);\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>AJAX - test1.jsp</h1>\r\n");
      out.write("	<form action=\"\" method=\"post\">\r\n");
      out.write("		<table border=\"1\">\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>아이디</th>\r\n");
      out.write("				<td><input type=\"text\" name=\"id\" id=\"id\" required=\"required\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>패스워드</th>\r\n");
      out.write("				<td><input type=\"password\" name=\"passwd\" id=\"passwd\" required=\"required\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td colspan=\"2\" id=\"btnArea\">\r\n");
      out.write("					<input type=\"button\" id=\"btnLogin\" value=\"로그인\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("	</form>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<h1>응답 처리 결과</h1>\r\n");
      out.write("	<div id=\"resultArea\"><!-- AJAX 요청에 대한 응답 처리 결과를 출력할 위치 --></div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
