/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-03-22 05:23:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ajax;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test2_005fcheck_005fid_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1675146893323L));
    _jspx_dependants.put("jar:file:/D:/Shared/JSP/workspace_JSP/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/StudyJavascript/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("   \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"js/jquery-3.6.4.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(function() {\r\n");
      out.write("		// 파라미터로 전달받은 id, isDuplicate 값 가져와서 변수에 저장\r\n");
      out.write("		// => EL 표기법을 통해 파라미터에 접근 후 해당 값을 자바스크립트 변수에 저장\r\n");
      out.write("		// => 만약, 파라미터가 존재하지 않으면 널스트링(\"\")값 저장됨\r\n");
      out.write("		let id = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"; // string 타입으로 저장\r\n");
      out.write("		let isDuplicate = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.isDuplicate}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"; // string 타입으로 저장\r\n");
      out.write("// 		alert(id + \" : \" + typeof(id) + \"\\n\" + isDuplicate + \" : \" + typeof(isDuplicate));\r\n");
      out.write("		\r\n");
      out.write("		// id 파라미터와 isDuplicate 파라미터가 존재할 경우\r\n");
      out.write("		if(id != \"\" && isDuplicate != \"\") {\r\n");
      out.write("			// 아이디 입력창에 현재 아이디값을 표시\r\n");
      out.write("			$(\"#id\").val(id);\r\n");
      out.write("			\r\n");
      out.write("			// isDuplicate 값을 문자열 그대로 활용하여 if문으로 판별\r\n");
      out.write("			// => \"true\" 일 경우 resultArea 영역에 \"이미 사용중인 아이디\" 텍스트 출력(빨간색)하고\r\n");
      out.write("			//    아니면, \"사용 가능한 아이디\" 텍스트(파란색) 출력\r\n");
      out.write("			// => 주의! 다른 데이터를 boolean 타입으로 변환 시 데이터가 존재하면 무조건 true\r\n");
      out.write("			//    따라서, \"true\" 와 \"false\" 문자열은 무조건 true 로 변환되어 판별이 불가능\r\n");
      out.write("			if(isDuplicate == \"true\") { // 문자열 상태로 그대로 판별\r\n");
      out.write("				$(\"#resultArea\").html(\"이미 사용중인 아이디\");\r\n");
      out.write("				$(\"#resultArea\").css(\"color\", \"red\");\r\n");
      out.write("				\r\n");
      out.write("				// 아이디 사용 버튼을 숨김 처리 = hide() 메서드 사용\r\n");
      out.write("				$(\"#btnUseId\").hide();\r\n");
      out.write("				\r\n");
      out.write("				// 자바스크립트에서 버튼을 생성할 수도 있고, 숨길 수도 있다!\r\n");
      out.write("				// => resultArea 영역 바깥쪽의 뒷부분에 추가된 버튼 삭제하기(remove() 메서드 활용)\r\n");
      out.write("				$(\"#btnUseId\").remove();\r\n");
      out.write("			} else {\r\n");
      out.write("				$(\"#resultArea\").html(\"사용 가능한 아이디\");\r\n");
      out.write("				$(\"#resultArea\").css(\"color\", \"blue\");\r\n");
      out.write("				\r\n");
      out.write("				// 아이디 사용 버튼을 숨김 해제 처리 = show() 메서드 사용\r\n");
      out.write("				$(\"#btnUseId\").show();\r\n");
      out.write("				\r\n");
      out.write("				// 자바스크립트에서 버튼을 생성할 수도 있고, 숨길 수도 있다!\r\n");
      out.write("				// => resultArea 영역 바깥쪽의 뒷부분에 버튼 추가하기(after() 메서드 활용)\r\n");
      out.write("				$(\"#resultArea\").after('<input type=\"button\" value=\"아이디 사용2\" id=\"btnUseId2\">');\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// id 선택자가 btnUseId 인 버튼이 클릭되면 이벤트 처리\r\n");
      out.write("		$(\"#btnUseId\").on(\"click\", function() {\r\n");
      out.write("			// 부모창의 아이디 입력란에 중복 확인이 완료된 아이디를 표시\r\n");
      out.write("// 			opener.document.querySelector(\"#id\").value = document.querySelector(\"#id\").value;\r\n");
      out.write("			\r\n");
      out.write("			// jQuery 문법을 사용하여 부모창 아이디 입력란에 아이디 표시하기\r\n");
      out.write("			// 1) $(\"선택자\", opener.document).val(아이디);\r\n");
      out.write("// 			$(\"#id\", opener.document).val($(\"#id\").val());\r\n");
      out.write("			// 2) $(opener.document).find(\"선택자\").val(아이디);\r\n");
      out.write("			$(opener.document).find(\"#id\").val($(\"#id\").val());\r\n");
      out.write("			\r\n");
      out.write("			// 현재 아이디 중복 확인창(자식창) 닫기\r\n");
      out.write("			window.close();\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h3>아이디 중복 체크</h3>\r\n");
      out.write("	<form action=\"MemberCheckDupIdPro.me\" method=\"get\">\r\n");
      out.write("		아이디 <input type=\"text\" name=\"id\" id=\"id\" required=\"required\"><br>\r\n");
      out.write("		<input type=\"submit\" value=\"중복확인\">\r\n");
      out.write("	</form>\r\n");
      out.write("	<div id=\"resultArea\"></div>\r\n");
      out.write("	<input type=\"button\" value=\"아이디 사용\" id=\"btnUseId\" style=\"display: none;\">\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
