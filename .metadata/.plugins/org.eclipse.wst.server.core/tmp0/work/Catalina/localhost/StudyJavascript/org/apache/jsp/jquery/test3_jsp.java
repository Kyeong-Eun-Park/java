/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-03-14 07:33:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jquery;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"../js/jquery-3.6.4.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	// ready 이벤트 처리\r\n");
      out.write("	$(function() {\r\n");
      out.write("		/*\r\n");
      out.write("		css() 메서드\r\n");
      out.write("		- 파라미터로 속성명 지정 시 해당 CSS 속성값 리턴\r\n");
      out.write("		  => 이 때, 대상이 복수개일 경우 첫번째 요소의 값만 리턴됨\r\n");
      out.write("		- 속성명과 속성값을 함께 지정 시 해당 CSS 속성값 변경\r\n");
      out.write("		  => 이 때, 대상이 복수개일 경우 복수개의 모든 요소에 변경 작업 적용됨\r\n");
      out.write("	    - 메서드 파라미터에 익명함수 활용할 경우 대상 요소를 차례대로 접근하는\r\n");
      out.write("	      반복문 형태로 사용 가능함\r\n");
      out.write("		*/\r\n");
      out.write("		// h3 태그의 \"color\" 속성값 출력\r\n");
      out.write("// 		alert($(\"h3\").css(\"color\")); // rgb(0, 0, 0)\r\n");
      out.write("		\r\n");
      out.write("		// h3 태그 중 첫번째 요소 글자색 파란색으로 변경\r\n");
      out.write("		$(\"h3:first\").css(\"color\", \"blue\");\r\n");
      out.write("// 		alert($(\"h3\").css(\"color\")); // rgb(0, 0, 255)\r\n");
      out.write("		\r\n");
      out.write("		// css() 메서드(다른 메서드에도 적용됨) 내에서 익명 함수 구현 시\r\n");
      out.write("		// 대상 태그를 차례대로 접근하는 반복문 형태로 활용 가능함\r\n");
      out.write("		// css(\"속성명\", function(index, value) {});\r\n");
      out.write("		// => 대상 태그를 차례대로 접근하면서 해당 요소의 인덱스와 속성값이 파라미터로 전달됨\r\n");
      out.write("		//    이 때, 해당 작업은 반복문 형태로 처리됨\r\n");
      out.write("		// 1) 파라미터가 없는 익명 함수 구현 시 => 해당 선택자 요소 갯수만큼 반복 실행됨\r\n");
      out.write("		$(\"h3\").css(\"color\", function() {\r\n");
      out.write("// 			alert(\"h3 태그 접근!\"); // 3번 호출됨(h3 태그가 3개이므로)\r\n");
      out.write("		});\r\n");
      out.write("	\r\n");
      out.write("		// 2) 파라미터가 1개인 익명 함수 구현 시 => 해당 요소의 인덱스가 전달됨(태그 순서 번호)\r\n");
      out.write("		$(\"h3\").css(\"color\", function(index) {\r\n");
      out.write("// 			// 대상 선택자 요소가 0번째 요소부터 차례대로 요소의 인덱스 값이 전달됨\r\n");
      out.write("// 			alert(index + \"번 h3 태그 접근!\"); // 0 ~ 2번 태그까지 총 3번 호출됨\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// 3) 파라미터가 2개인 익명 함수 구현 시 \r\n");
      out.write("		//    => 해당 요소의 인덱스와 속성값이 전달됨\r\n");
      out.write("		$(\"h3\").css(\"color\", function(index, value) {\r\n");
      out.write("			// 대상 선택자 요소의 0번째 요소부터 차례대로 접근하여 \r\n");
      out.write("			// 해당 요소의 인덱스 값과 속성값이 전달됨\r\n");
      out.write("// 			alert(index + \"번 h3 태그 접근 - 속성값 : \" + value);\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// =============================================================\r\n");
      out.write("		// 함수 반복하면서 해당 속성값을 변경하는 방법\r\n");
      out.write("		// => return 문 뒤에 변경할 값을 지정\r\n");
      out.write("		// -------------------------------------------\r\n");
      out.write("		// 대상 태그의 color 속성값을 차례대로 한꺼번에 변경\r\n");
      out.write("// 		$(\"h3\").css(\"color\", function() {\r\n");
      out.write("// 			return \"red\"; // 모든 h3 태그의 \"color\" 속성값을 \"red\" 변경\r\n");
      out.write("// 		});\r\n");
      out.write("		\r\n");
      out.write("		// 대상 태그의 color 속성값을 각각 다른 색으로 변경\r\n");
      out.write("		// => 함수 파라미터로 인덱스를 전달받고, 변경할 색상을 배열을 통해 저장하여 활용\r\n");
      out.write("		let colorValue = [\"red\", \"green\", \"blue\"];\r\n");
      out.write("		let bgColorValue = [\"cyan\", \"magenta\", \"yellow\"];\r\n");
      out.write("		\r\n");
      out.write("// 		$(\"h3\").css(\"color\", function(index) {\r\n");
      out.write("// 			// 배열 인덱스 지정을 위해 함수 파라미터로 전달된 index 값 활용\r\n");
      out.write("// 			return colorValue[index];\r\n");
      out.write("// 		});\r\n");
      out.write("		\r\n");
      out.write("		// 대상 태그의 \"background\" 속성값을 각각 \"cyan\", \"magenta\", \"yellow\" 로 변경\r\n");
      out.write("// 		$(\"h3\").css(\"background\", function(index) {\r\n");
      out.write("// 			return bgColorValue[index];\r\n");
      out.write("// 		});\r\n");
      out.write("		\r\n");
      out.write("		// 동일한 대상에 복수개의 속성을 반복 형태로 변경하는 경우\r\n");
      out.write("		// $(\"선택자\").메서드명({속성1 : function(index) {}}, {속성2 : function(index) {}});\r\n");
      out.write("		$(\"h3\").css({\r\n");
      out.write("			color : function(index) {\r\n");
      out.write("				// 글자색 변경을 위한 return 문 사용\r\n");
      out.write("				return colorValue[index];\r\n");
      out.write("			},\r\n");
      out.write("			background : function(index) {\r\n");
      out.write("				// 배경색 변경을 위한 return 문 사용\r\n");
      out.write("				return bgColorValue[index];\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>jQuery - test3.jsp</h1>\r\n");
      out.write("	<h3>제목1</h3>\r\n");
      out.write("	<h3>제목2</h3>\r\n");
      out.write("	<h3>제목3</h3>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
