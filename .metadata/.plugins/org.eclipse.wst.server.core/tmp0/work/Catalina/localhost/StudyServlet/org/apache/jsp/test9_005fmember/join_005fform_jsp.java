/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-02-28 02:46:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.test9_005fmember;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_005fform_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	var isCorrectId = false; // 아이디 사용 가능 여부를 저장할 변수 선언(true : 가능, false : 불가능)\r\n");
      out.write("	var isSamePassword = false; // 패스워드 일치 여부를 저장할 변수(true : 일치, false : 불일치)\r\n");
      out.write("	var isCorrectPassword = false; // 패스워드 사용 가능 여부(true : 가능, false : 불가능)\r\n");
      out.write("	\r\n");
      out.write("	// 아이디 중복체크\r\n");
      out.write("	function checkDuplicateId() {\r\n");
      out.write("		// ID 입력란에 입력된 아이디 가져오기\r\n");
      out.write("		let id = document.joinForm.id.value;\r\n");
      out.write("		\r\n");
      out.write("		// -----------------------------------------------------------------------\r\n");
      out.write("		// 임시) 아이디 중복 체크를 위한 새 창 열기(check_id.jsp)\r\n");
      out.write("// 		window.open(\"check_id.jsp\", \"\", \"width=400, height=200\");\r\n");
      out.write("		// -----------------------------------------------------------------------\r\n");
      out.write("	\r\n");
      out.write("		// ------------------------ 숙제1 ---------------------------\r\n");
      out.write("		// 입력받은 아이디가 정규표현식과 일치할 경우 \r\n");
      out.write("		// checkIdResult 위치에 \"적합한 아이디\" 출력하고, 아니면 \"아이디 규칙 확인 필수!\" 출력\r\n");
      out.write("		// => 영문자(대소문자), 숫자를 조합하여 4 ~ 8자리(단, 첫글자는 숫자 사용 불가)\r\n");
      out.write("		let idRegex = /^[A-Za-z][A-Za-z0-9]{3,7}$/; \r\n");
      out.write("		\r\n");
      out.write("		if(idRegex.exec(id)) {\r\n");
      out.write("			document.getElementById(\"checkIdResult\").innerHTML = \"적합한 아이디\";\r\n");
      out.write("			document.joinForm.id.style.background = \"white\";\r\n");
      out.write("			\r\n");
      out.write("			isCorrectId = true;\r\n");
      out.write("		} else {\r\n");
      out.write("			alert(\"아이디 규칙 확인 필수!\");\r\n");
      out.write("			document.getElementById(\"checkIdResult\").innerHTML = \"\";\r\n");
      out.write("			document.joinForm.id.select(); // 아이디 입력창 커서 요청 및 입력 항목 선택\r\n");
      out.write("			document.joinForm.id.style.background = \"pink\";\r\n");
      out.write("			\r\n");
      out.write("			isCorrectId = false;\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/*\r\n");
      out.write("	---------------------------- 숙제2 ----------------------------\r\n");
      out.write("	2. 비밀번호 입력란에 키를 누를때마다 비밀번호 규칙 체크하기\r\n");
      out.write("	=> 체크 결과를 비밀번호 입력창 우측 빈공간에 표시하기\r\n");
      out.write("	=> 영문자, 숫자, 특수문자(!@#$) 8 ~ 16글자 사이이면 \"사용 가능한 패스워드\"(파란색) 표시,\r\n");
      out.write("	   아니면, \"사용 불가능한 패스워드\"(빨간색) 표시\r\n");
      out.write("	*/\r\n");
      out.write("	function checkPasswd(passwd) { // 함수 호출될 때 입력된 패스워드 전달받기(this.value)\r\n");
      out.write("		let span_checkPasswdResult = document.getElementById(\"checkPasswdResult\");\r\n");
      out.write("	\r\n");
      out.write("		// 메세지 출력 문장의 중복을 제거하기 위해 메세지와 색상명을 저장할 변수 선언\r\n");
      out.write("		let msg = \"\";\r\n");
      out.write("		let color = \"\";\r\n");
      out.write("		\r\n");
      out.write("		// 패스워드가 변경될 때 패스워드 확인 동작도 함께 수행하기 위해\r\n");
      out.write("		// checkConfirmPassword() 함수를 이 위치에서 호출\r\n");
      out.write("		checkConfirmPasswd(document.joinForm.passwd2.value);\r\n");
      out.write("		\r\n");
      out.write("		let passwdRegex = /^[A-Za-z0-9!@#$]{8,16}$/;\r\n");
      out.write("		\r\n");
      out.write("		// 패스워드 복잡도 검사를 수행하려면 각 규칙을 별도로 지정한 후 부분 검사를 수행해야한다.\r\n");
      out.write("		// 또한, 부분 검사 수행 결과를 포인트화 하여 일정 점수 이상만 사용 가능하도록 처리\r\n");
      out.write("		// 1) 영문자 대문자 포함 시 +1점\r\n");
      out.write("		// 2) 영문자 소문자 포함 시 +1점\r\n");
      out.write("		// 3) 숫자 포함 시 +1점\r\n");
      out.write("		// 4) 특수문자(!@#$) 포함 시 +1점\r\n");
      out.write("		// => 최소 2가지 이상 조합되도록 체크\r\n");
      out.write("		let upperCaseRegex = /[A-Z]/; // 영문 대문자\r\n");
      out.write("		let lowerCaseRegex = /[a-z]/; // 영문 소문자\r\n");
      out.write("		let numRegex = /[0-9]/; // 숫자\r\n");
      out.write("		let specRegex = /[!@#$]/; // 특수문자\r\n");
      out.write("		\r\n");
      out.write("		// 입력된 패스워드 길이 체크\r\n");
      out.write("		if(passwdRegex.exec(passwd)) { // 사용 가능\r\n");
      out.write("			// 패스워드 전체 규칙을 통과했을 경우 복잡도 검사 수행\r\n");
      out.write("			// => 각 규칙에 해당하는 문자가 포함될 때마다 점수를 1점씩 가산\r\n");
      out.write("			let score = 0; // 점수를 누적(카운팅)할 변수\r\n");
      out.write("			\r\n");
      out.write("			score += upperCaseRegex.exec(passwd) ? 1 : 0;\r\n");
      out.write("			score += lowerCaseRegex.exec(passwd) ? 1 : 0;\r\n");
      out.write("			score += numRegex.exec(passwd) ? 1 : 0;\r\n");
      out.write("			score += specRegex.exec(passwd) ? 1 : 0;\r\n");
      out.write("// 			console.log(score);\r\n");
      out.write("			\r\n");
      out.write("			// 복잡도 검사 결과 판별하여 출력\r\n");
      out.write("			// => 만약, 1점 이하일 경우 \"사용 불가능한 패스워드\",\r\n");
      out.write("			//    2점이면 \"패스워드 : 위험\", \r\n");
      out.write("			//    3점이면 \"패스워드 : 보통\", \r\n");
      out.write("			//    4점이면 \"패스워드 : 안전\"\r\n");
      out.write("			switch(score) {\r\n");
      out.write("				case 4 :  \r\n");
      out.write("					msg = \"패스워드 : 안전\";\r\n");
      out.write("					color = \"BLUE\";\r\n");
      out.write("					isCorrectPassword = true;\r\n");
      out.write("					break;\r\n");
      out.write("				case 3 : \r\n");
      out.write("					msg = \"패스워드 : 보통\";\r\n");
      out.write("					color = \"GREEN\";\r\n");
      out.write("					isCorrectPassword = true;\r\n");
      out.write("					break;\r\n");
      out.write("				case 2 : \r\n");
      out.write("					msg = \"패스워드 : 위험\";\r\n");
      out.write("					color = \"ORANGE\";\r\n");
      out.write("					isCorrectPassword = true;\r\n");
      out.write("					break;\r\n");
      out.write("				default : \r\n");
      out.write("					msg = \"영문 대문자, 소문자, 숫자, 특수문자 2가지 이상 조합 필수!\";\r\n");
      out.write("					color = \"RED\";\r\n");
      out.write("					isCorrectPassword = false;\r\n");
      out.write("			}\r\n");
      out.write("		} else { // 사용 불가능\r\n");
      out.write("			msg = \"사용 불가능한 패스워드\";\r\n");
      out.write("			color = \"RED\";\r\n");
      out.write("			isCorrectPassword = false;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 모든 판별이 끝난 후 결과값을 적용(코드 중복 제거)\r\n");
      out.write("		span_checkPasswdResult.innerHTML = msg;\r\n");
      out.write("		span_checkPasswdResult.style.color = color;\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/*\r\n");
      out.write("	3. 비밀번호확인 입력란에 키를 누를때마다 비밀번호와 같은지 체크하기\r\n");
      out.write("	=> 체크 결과를 비밀번호확인 입력창 우측 빈공간에 표시하기\r\n");
      out.write("	=> 비밀번호와 비밀번호확인 입력 내용이 같으면 \"비밀번호 일치\"(파란색) 표시,\r\n");
      out.write("	   아니면, \"비밀번호 불일치\"(빨간색) 표시\r\n");
      out.write("	*/\r\n");
      out.write("	function checkConfirmPasswd(passwd2) { // 함수 호출될 때 입력된 패스워드 전달받기\r\n");
      out.write("		let span_checkPasswd2Result = document.getElementById(\"checkPasswd2Result\");\r\n");
      out.write("		\r\n");
      out.write("		// 입력된 패스워드 일치 여부 체크\r\n");
      out.write("		if(passwd2 == document.joinForm.passwd.value) { // 두 패스워드 일치\r\n");
      out.write("			span_checkPasswd2Result.innerHTML = \"비밀번호 일치\";\r\n");
      out.write("			span_checkPasswd2Result.style.color = \"BLUE\";\r\n");
      out.write("			\r\n");
      out.write("			// 비밀번호 일치 표시를 위해 isSamePassword 변수값을 true 로 변경\r\n");
      out.write("			isSamePassword = true;\r\n");
      out.write("		} else { // 패스워드 불일치\r\n");
      out.write("			span_checkPasswd2Result.innerHTML = \"비밀번호 불일치\";\r\n");
      out.write("			span_checkPasswd2Result.style.color = \"RED\";\r\n");
      out.write("			\r\n");
      out.write("			// 비밀번호 불일치 표시를 위해 isSamePassword 변수값을 false 로 변경\r\n");
      out.write("			isSamePassword = false;\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 주민번호 앞자리 6자리 입력되면 뒷자리로 커서 요청\r\n");
      out.write("	function checkJumin1(jumin1) { // checkJumin1(this.value)\r\n");
      out.write("		if(jumin1.length == 6) {\r\n");
      out.write("			document.joinForm.jumin2.focus(); // 커서 요청(포커스 요청)\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 주민번호 뒷자리 7자리 입력되면 커서 해제\r\n");
      out.write("	function checkJumin2(jumin2) {\r\n");
      out.write("		if(jumin2.length == 7) {\r\n");
      out.write("			document.joinForm.jumin2.blur(); // 커서 제거(포커스 해제)\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 도메인 셀렉트박스 처리\r\n");
      out.write("	function selectDomain(domain) {\r\n");
      out.write("		document.joinForm.email2.value = domain;\r\n");
      out.write("		\r\n");
      out.write("		// 만약, 직접입력 항목 선택 시(\"\" 입력 시) 입력 항목 포커스 요청 및 읽기 전용 해제\r\n");
      out.write("		// 아니면, 입력 항목 읽기 전용 설정\r\n");
      out.write("		if(domain == \"\") {\r\n");
      out.write("			document.joinForm.email2.focus();\r\n");
      out.write("			document.joinForm.email2.readOnly = false; // 주의! readonly 속성 readOnly 로 표기\r\n");
      out.write("			document.joinForm.email2.style.backgroundColor = \"white\"; // 배경색 변경\r\n");
      out.write("		} else {\r\n");
      out.write("			document.joinForm.email2.readOnly = true;\r\n");
      out.write("			document.joinForm.email2.style.backgroundColor = \"lightgray\";\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 체크박스 전체 선택 기능\r\n");
      out.write("	function checkAll(isChecked) { // this.checked 값 전달을 통해 체크 상태 받아오기\r\n");
      out.write("		if(isChecked) { // true(체크)\r\n");
      out.write("			document.joinForm.hobby[0].checked = true;\r\n");
      out.write("			document.joinForm.hobby[1].checked = true;\r\n");
      out.write("			document.joinForm.hobby[2].checked = true;\r\n");
      out.write("		} else { // false(체크 해제)\r\n");
      out.write("			document.joinForm.hobby[0].checked = false;\r\n");
      out.write("			document.joinForm.hobby[1].checked = false;\r\n");
      out.write("			document.joinForm.hobby[2].checked = false;\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// submit 버튼 클릭 시 필수 조건들이 만족할 경우에만 다음 페이지로 이동하기\r\n");
      out.write("	function checkForm(fr) { // 함수 파라미터로 폼 객체 전달받기(document.joinForm = fr)\r\n");
      out.write("		// 각 조건이 만족하지 않을 때마다 false 리턴, 모두 만족하면 true 리턴\r\n");
      out.write("		if(!isCorrectId) { // isCorrectId == false (아이디 사용 불가)\r\n");
      out.write("			alert(\"아이디 4 ~ 8자리 필수!\");\r\n");
      out.write("			fr.id.select();\r\n");
      out.write("			return false;\r\n");
      out.write("		} else if(!isCorrectPassword) { // isCorrectPassword == false (불가능한 패스워드)\r\n");
      out.write("			alert(\"패스워드 8 ~ 16자리 필수!\");\r\n");
      out.write("			fr.passwd.select();\r\n");
      out.write("			return false;\r\n");
      out.write("		} else if(!isSamePassword) { // isSamePassword == false (패스워드 불일치)\r\n");
      out.write("			alert(\"패스워드가 일치하지 않습니다!\");\r\n");
      out.write("			fr.passwd2.select();\r\n");
      out.write("			return false;\r\n");
      out.write("		} else if(fr.jumin1.value.length != 6) {\r\n");
      out.write("			alert(\"주민번호 앞자리 6자리 필수!\");\r\n");
      out.write("			fr.jumin1.select();\r\n");
      out.write("			return false;\r\n");
      out.write("		} else if(fr.jumin2.value.length != 7) {\r\n");
      out.write("			alert(\"주민번호 뒷자리 7자리 필수!\");\r\n");
      out.write("			fr.jumin2.select();\r\n");
      out.write("			return false;\r\n");
      out.write("		} else if(fr.job.value == \"\") {\r\n");
      out.write("			alert(\"직업 선택 필수!\");\r\n");
      out.write("			fr.job.focus();\r\n");
      out.write("			return false;\r\n");
      out.write("		} else if(fr.gender.value.length == 0) { \r\n");
      out.write("			// 성별은 둘 중 하나만 전달되므로 길이 체크 가능\r\n");
      out.write("			alert(\"성별 선택 필수!\");\r\n");
      out.write("			return false;\r\n");
      out.write("		} else if(!fr.hobby[0].checked && !fr.hobby[1].checked && !fr.hobby[2].checked) {\r\n");
      out.write("			// 체크박스는 배열 형태로 접근하며 checked 속성값이 true 면 체크, false 면 미체크\r\n");
      out.write("			// => 따라서, 3개의 항목이 모두 false 이면 체크 요청\r\n");
      out.write("			alert(\"취미 하나 이상 선택 필수!\");\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("	\r\n");
      out.write("		// 위의 모든 조건을 만족하지 않을 때(= 입력이 모두 정상) submit 동작 수행(= true 리턴)\r\n");
      out.write("		return true;\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "top.jsp", out, false);
      out.write("\r\n");
      out.write("	<div align=\"center\">\r\n");
      out.write("		<h1>회원가입</h1>\r\n");
      out.write("		<!-- 회원 가입 처리 수행 위해 \"JoinPro\" 서블릿 주소 요청 -> JoinProServlet 클래스 매핑 -->\r\n");
      out.write("<!-- 		<form action=\"JoinPro\" name=\"joinForm\" method=\"post\" onsubmit=\"return checkForm(this)\"> -->\r\n");
      out.write("		<form action=\"MemberJoinPro.me\" name=\"joinForm\" method=\"post\">\r\n");
      out.write("			<table border=\"1\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>이름</th>\r\n");
      out.write("					<td><input type=\"text\" name=\"name\" required=\"required\"></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>ID</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"text\" name=\"id\" placeholder=\"4 ~ 8글자 사이 입력\" onchange=\"checkDuplicateId()\" required=\"required\">\r\n");
      out.write("						<span id=\"checkIdResult\"></span>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>비밀번호</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"text\" name=\"passwd\" placeholder=\"8 ~ 16글자 사이 입력\" onchange=\"checkPasswd(this.value)\" required=\"required\">\r\n");
      out.write("						<span id=\"checkPasswdResult\"></span>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>비밀번호확인</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"password\" name=\"passwd2\" onchange=\"checkConfirmPasswd(this.value)\" required=\"required\">\r\n");
      out.write("						<span id=\"checkPasswd2Result\"></span>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>주민번호</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						");
      out.write("\r\n");
      out.write("						<input type=\"text\" name=\"jumin1\" onkeyup=\"checkJumin1(this.value)\" maxlength=\"6\" required=\"required\"> - \r\n");
      out.write("						<input type=\"text\" name=\"jumin2\" onkeyup=\"checkJumin2(this.value)\" maxlength=\"7\" required=\"required\">\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>E-Mail</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"text\" name=\"email1\" required=\"required\">@<input type=\"text\" name=\"email2\" required=\"required\">\r\n");
      out.write("						<select id=\"emailDomain\" onchange=\"selectDomain(this.value)\">\r\n");
      out.write("							<option value=\"\">직접입력</option>\r\n");
      out.write("							<option value=\"naver.com\">naver.com</option>\r\n");
      out.write("							<option value=\"nate.com\">nate.com</option>\r\n");
      out.write("							<option value=\"gmail.com\">gmail.com</option>\r\n");
      out.write("						</select>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>직업</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<select name=\"job\">\r\n");
      out.write("							<option value=\"\">항목을 선택하세요</option>\r\n");
      out.write("							<option value=\"개발자\">개발자</option>\r\n");
      out.write("							<option value=\"DB엔지니어\">DB엔지니어</option>\r\n");
      out.write("							<option value=\"아르바이트\">아르바이트</option>\r\n");
      out.write("						</select>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>성별</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"radio\" name=\"gender\" value=\"남\">남\r\n");
      out.write("						<input type=\"radio\" name=\"gender\" value=\"여\">여\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>취미</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"checkbox\" name=\"hobby\" value=\"여행\">여행\r\n");
      out.write("						<input type=\"checkbox\" name=\"hobby\" value=\"독서\">독서\r\n");
      out.write("						<input type=\"checkbox\" name=\"hobby\" value=\"게임\">게임\r\n");
      out.write("						<input type=\"checkbox\" id=\"check_all\" onclick=\"checkAll(this.checked)\">전체선택\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>가입동기</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<textarea rows=\"10\" cols=\"60\" name=\"motivation\" required=\"required\"></textarea>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td colspan=\"2\" align=\"center\">\r\n");
      out.write("						<input type=\"submit\" value=\"가입\">\r\n");
      out.write("						<input type=\"reset\" value=\"초기화\">\r\n");
      out.write("						<input type=\"button\" value=\"돌아가기\">\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
