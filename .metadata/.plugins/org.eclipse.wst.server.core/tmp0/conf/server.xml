<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
--><!-- Note:  A "Server" is not itself a "Container", so you may not
     define subcomponents such as "Valves" at this level.
     Documentation at /docs/config/server.html
 --><Server port="8006" shutdown="SHUTDOWN">
  <Listener className="org.apache.catalina.startup.VersionLoggerListener"/>
  <!-- Security listener. Documentation at /docs/config/listeners.html
  <Listener className="org.apache.catalina.security.SecurityListener" />
  -->
  <!-- APR library loader. Documentation at /docs/apr.html -->
  <Listener SSLEngine="on" className="org.apache.catalina.core.AprLifecycleListener"/>
  <!-- Prevent memory leaks due to use of particular java/javax APIs-->
  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener"/>
  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener"/>
  <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener"/>

  <!-- Global JNDI resources
       Documentation at /docs/jndi-resources-howto.html
  -->
  <GlobalNamingResources>
    <!-- Editable user database that can also be used by
         UserDatabaseRealm to authenticate users
    -->
    <Resource auth="Container" description="User database that can be updated and saved" factory="org.apache.catalina.users.MemoryUserDatabaseFactory" name="UserDatabase" pathname="conf/tomcat-users.xml" type="org.apache.catalina.UserDatabase"/>
  </GlobalNamingResources>

  <!-- A "Service" is a collection of one or more "Connectors" that share
       a single "Container" Note:  A "Service" is not itself a "Container",
       so you may not define subcomponents such as "Valves" at this level.
       Documentation at /docs/config/service.html
   -->
  <Service name="Catalina">

    <!--The connectors can use a shared executor, you can define one or more named thread pools-->
    <!--
    <Executor name="tomcatThreadPool" namePrefix="catalina-exec-"
        maxThreads="150" minSpareThreads="4"/>
    -->


    <!-- A "Connector" represents an endpoint by which requests are received
         and responses are returned. Documentation at :
         Java HTTP Connector: /docs/config/http.html
         Java AJP  Connector: /docs/config/ajp.html
         APR (HTTP/AJP) Connector: /docs/apr.html
         Define a non-SSL/TLS HTTP/1.1 Connector on port 8080
    -->
    <Connector connectionTimeout="20000" port="8081" protocol="HTTP/1.1" redirectPort="8443"/>
    <!-- A "Connector" using the shared thread pool-->
    <!--
    <Connector executor="tomcatThreadPool"
               port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
    -->
    <!-- Define an SSL/TLS HTTP/1.1 Connector on port 8443
         This connector uses the NIO implementation. The default
         SSLImplementation will depend on the presence of the APR/native
         library and the useOpenSSL attribute of the AprLifecycleListener.
         Either JSSE or OpenSSL style configuration may be used regardless of
         the SSLImplementation selected. JSSE style configuration is used below.
    -->
    <!--
    <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
               maxThreads="150" SSLEnabled="true">
        <SSLHostConfig>
            <Certificate certificateKeystoreFile="conf/localhost-rsa.jks"
                         type="RSA" />
        </SSLHostConfig>
    </Connector>
    -->
    <!-- Define an SSL/TLS HTTP/1.1 Connector on port 8443 with HTTP/2
         This connector uses the APR/native implementation which always uses
         OpenSSL for TLS.
         Either JSSE or OpenSSL style configuration may be used. OpenSSL style
         configuration is used below.
    -->
    <!--
    <Connector port="8443" protocol="org.apache.coyote.http11.Http11AprProtocol"
               maxThreads="150" SSLEnabled="true" >
        <UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol" />
        <SSLHostConfig>
            <Certificate certificateKeyFile="conf/localhost-rsa-key.pem"
                         certificateFile="conf/localhost-rsa-cert.pem"
                         certificateChainFile="conf/localhost-rsa-chain.pem"
                         type="RSA" />
        </SSLHostConfig>
    </Connector>
    -->

    <!-- Define an AJP 1.3 Connector on port 8009 -->
    <!--
    <Connector protocol="AJP/1.3"
               address="::1"
               port="8009"
               redirectPort="8443" />
    -->

    <!-- An Engine represents the entry point (within Catalina) that processes
         every request.  The Engine implementation for Tomcat stand alone
         analyzes the HTTP headers included with the request, and passes them
         on to the appropriate Host (virtual host).
         Documentation at /docs/config/engine.html -->

    <!-- You should set jvmRoute to support load-balancing via AJP ie :
    <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
    -->
    <Engine defaultHost="localhost" name="Catalina">

      <!--For clustering, please take a look at documentation at:
          /docs/cluster-howto.html  (simple how to)
          /docs/config/cluster.html (reference documentation) -->
      <!--
      <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>
      -->

      <!-- Use the LockOutRealm to prevent attempts to guess user passwords
           via a brute-force attack -->
      <Realm className="org.apache.catalina.realm.LockOutRealm">
        <!-- This Realm uses the UserDatabase configured in the global JNDI
             resources under the key "UserDatabase".  Any edits
             that are performed against this UserDatabase are immediately
             available for use by the Realm.  -->
        <Realm className="org.apache.catalina.realm.UserDatabaseRealm" resourceName="UserDatabase"/>
      </Realm>

      <Host appBase="webapps" autoDeploy="true" name="localhost" unpackWARs="true">

        <!-- SingleSignOn valve, share authentication between web applications
             Documentation at: /docs/config/valve.html -->
        <!--
        <Valve className="org.apache.catalina.authenticator.SingleSignOn" />
        -->

        <!-- Access log processes all example.
             Documentation at: /docs/config/valve.html
             Note: The pattern used is equivalent to using pattern="common" -->
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs" pattern="%h %l %u %t &quot;%r&quot; %s %b" prefix="localhost_access_log" suffix=".txt"/>

      <Context docBase="D:\Shared\JSP\workspace_JSP\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\ROOT" path="" reloadable="false"/><Context docBase="D:\Shared\JSP\workspace_JSP\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\StudyServlet" path="/StudyServlet" reloadable="true" source="org.eclipse.jst.jee.server:StudyServlet">
<!-- 
< DBCP 설정을 위한 context.xml 파일 설정 >
<Context> 태그 내에 <Resource> 태그를 사용하여 DBCP 정보 설정 
=> <Resource> 태그의 다양한 속성을 통해 각종 정보 설정해야함
=> * 표시가 붙은 항목은 값이 변경될 수 있는 항목들
1. name 속성(*) : 공유할 리소스 이름 
   => DB 작업 수행 코드(JdbcUtil 클래스 등)에서 DBCP API 를 통해 불러올 때 지정할 이름
2. auth 속성 : 자원 관리를 수행할 대상(인증 대상) 지정 => 톰캣이 컨테이너 역할을 통해 수행하므로 "Container" 지정
3. type 속성 : 서버상에서 리소스(Connection 객체) 사용 시 해당 리소스를 관리할 객체(클래스) 지정
   => javax.sql.DataSource 인터페이스 타입 지정
   => name 속성에 지정된 이름을 통해 DBCP 접근 시 DataSource 타입 객체가 리턴됨
4. driverClassName 속성(*) : JDBC 드라이버 클래스 지정(드라이버 API 파일에 해당하는 jar 파일 등록 필수!)
                          ex) MySQL 의 경우 "com.mysql.cj.jdbc.Driver"
                          ex) Oracle 의 경우 "com.jdbc.OracleDriver"
5. url 속성(*) : JDBC 접속에 필요한 URL 정보 지정
              ex) MySQL 의 경우 "jdbc:mysql://접속주소:포트번호/DB명"
              ex) Oracle 의 경우 "jdbc:oracle:thin:@접속주소:포트번호:DB명"
6. username 속성(*) : DB 접속 계정명
7. password 속성(*) : DB 접속 패스워드
8. maxActive 속성 : 동시에 생성(활성화)해 놓을 Connection 객체 갯수(생략 가능)
-->
	<Resource auth="Container" driverClassName="com.mysql.cj.jdbc.Driver" maxActive="500" name="jdbc/MySQL" password="1234" type="javax.sql.DataSource" url="jdbc:mysql://localhost:3306/study_jsp3" username="root"/>
	
	
</Context><Context docBase="D:\Shared\JSP\workspace_JSP\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\MVC_Board" path="/MVC_Board" reloadable="true" source="org.eclipse.jst.jee.server:MVC_Board">
<!-- 
< DBCP 설정을 위한 context.xml 파일 설정 >
<Context> 태그 내에 <Resource> 태그를 사용하여 DBCP 정보 설정 
=> <Resource> 태그의 다양한 속성을 통해 각종 정보 설정해야함
=> * 표시가 붙은 항목은 값이 변경될 수 있는 항목들
1. name 속성(*) : 공유할 리소스 이름 
   => DB 작업 수행 코드(JdbcUtil 클래스 등)에서 DBCP API 를 통해 불러올 때 지정할 이름
2. auth 속성 : 자원 관리를 수행할 대상(인증 대상) 지정 => 톰캣이 컨테이너 역할을 통해 수행하므로 "Container" 지정
3. type 속성 : 서버상에서 리소스(Connection 객체) 사용 시 해당 리소스를 관리할 객체(클래스) 지정
   => javax.sql.DataSource 인터페이스 타입 지정
   => name 속성에 지정된 이름을 통해 DBCP 접근 시 DataSource 타입 객체가 리턴됨
4. driverClassName 속성(*) : JDBC 드라이버 클래스 지정(드라이버 API 파일에 해당하는 jar 파일 등록 필수!)
                          ex) MySQL 의 경우 "com.mysql.cj.jdbc.Driver"
                          ex) Oracle 의 경우 "com.jdbc.OracleDriver"
5. url 속성(*) : JDBC 접속에 필요한 URL 정보 지정
              ex) MySQL 의 경우 "jdbc:mysql://접속주소:포트번호/DB명"
              ex) Oracle 의 경우 "jdbc:oracle:thin:@접속주소:포트번호:DB명"
6. username 속성(*) : DB 접속 계정명
7. password 속성(*) : DB 접속 패스워드
8. maxActive 속성 : 동시에 생성(활성화)해 놓을 Connection 객체 갯수(생략 가능)
-->
	<Resource auth="Container" driverClassName="com.mysql.cj.jdbc.Driver" maxActive="500" name="jdbc/MySQL" password="1234" type="javax.sql.DataSource" url="jdbc:mysql://localhost:3306/mvc_board3" username="root"/>
	
	
</Context><Context docBase="D:\Shared\JSP\workspace_JSP\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\StudyJSP" path="/StudyJSP" reloadable="true" source="org.eclipse.jst.jee.server:StudyJSP">
<!-- 
< DBCP 설정을 위한 context.xml 파일 설정 >
<Context> 태그 내에 <Resource> 태그를 사용하여 DBCP 정보 설정 
=> <Resource> 태그의 다양한 속성을 통해 각종 정보 설정해야함
=> * 표시가 붙은 항목은 값이 변경될 수 있는 항목들
1. name 속성(*) : 공유할 리소스 이름 
   => DB 작업 수행 코드(JdbcUtil 클래스 등)에서 DBCP API 를 통해 불러올 때 지정할 이름
2. auth 속성 : 자원 관리를 수행할 대상(인증 대상) 지정 => 톰캣이 컨테이너 역할을 통해 수행하므로 "Container" 지정
3. type 속성 : 서버상에서 리소스(Connection 객체) 사용 시 해당 리소스를 관리할 객체(클래스) 지정
   => javax.sql.DataSource 인터페이스 타입 지정
   => name 속성에 지정된 이름을 통해 DBCP 접근 시 DataSource 타입 객체가 리턴됨
4. driverClassName 속성(*) : JDBC 드라이버 클래스 지정(드라이버 API 파일에 해당하는 jar 파일 등록 필수!)
                          ex) MySQL 의 경우 "com.mysql.cj.jdbc.Driver"
                          ex) Oracle 의 경우 "com.jdbc.OracleDriver"
5. url 속성(*) : JDBC 접속에 필요한 URL 정보 지정
              ex) MySQL 의 경우 "jdbc:mysql://접속주소:포트번호/DB명"
              ex) Oracle 의 경우 "jdbc:oracle:thin:@접속주소:포트번호:DB명"
6. username 속성(*) : DB 접속 계정명
7. password 속성(*) : DB 접속 패스워드
8. maxActive 속성 : 동시에 생성(활성화)해 놓을 Connection 객체 갯수(생략 가능)
-->
	<Resource auth="Container" driverClassName="com.mysql.cj.jdbc.Driver" maxActive="500" name="jdbc/MySQL" password="1234" type="javax.sql.DataSource" url="jdbc:mysql://localhost:3306/study_jsp3" username="root"/>
	
	
</Context><Context docBase="D:\Shared\JSP\workspace_JSP\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\StudyJavascript" path="/StudyJavascript" reloadable="true" source="org.eclipse.jst.jee.server:StudyJavascript">
<!-- 
< DBCP 설정을 위한 context.xml 파일 설정 >
<Context> 태그 내에 <Resource> 태그를 사용하여 DBCP 정보 설정 
=> <Resource> 태그의 다양한 속성을 통해 각종 정보 설정해야함
=> * 표시가 붙은 항목은 값이 변경될 수 있는 항목들
1. name 속성(*) : 공유할 리소스 이름 
   => DB 작업 수행 코드(JdbcUtil 클래스 등)에서 DBCP API 를 통해 불러올 때 지정할 이름
2. auth 속성 : 자원 관리를 수행할 대상(인증 대상) 지정 => 톰캣이 컨테이너 역할을 통해 수행하므로 "Container" 지정
3. type 속성 : 서버상에서 리소스(Connection 객체) 사용 시 해당 리소스를 관리할 객체(클래스) 지정
   => javax.sql.DataSource 인터페이스 타입 지정
   => name 속성에 지정된 이름을 통해 DBCP 접근 시 DataSource 타입 객체가 리턴됨
4. driverClassName 속성(*) : JDBC 드라이버 클래스 지정(드라이버 API 파일에 해당하는 jar 파일 등록 필수!)
                          ex) MySQL 의 경우 "com.mysql.cj.jdbc.Driver"
                          ex) Oracle 의 경우 "com.jdbc.OracleDriver"
5. url 속성(*) : JDBC 접속에 필요한 URL 정보 지정
              ex) MySQL 의 경우 "jdbc:mysql://접속주소:포트번호/DB명"
              ex) Oracle 의 경우 "jdbc:oracle:thin:@접속주소:포트번호:DB명"
6. username 속성(*) : DB 접속 계정명
7. password 속성(*) : DB 접속 패스워드
8. maxActive 속성 : 동시에 생성(활성화)해 놓을 Connection 객체 갯수(생략 가능)
-->
	<Resource auth="Container" driverClassName="com.mysql.cj.jdbc.Driver" maxActive="500" name="jdbc/MySQL" password="1234" type="javax.sql.DataSource" url="jdbc:mysql://localhost:3306/mvc_board3" username="root"/>
	
	
</Context></Host>
    </Engine>
  </Service>
</Server>